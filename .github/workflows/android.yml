name: android

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gettext curl

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Clone Minetest from Codeberg
        run: |
          git clone --depth 1 https://codeberg.org/halon/Minetest.git minetest

      - name: Clone mcl_localplayer mod
        working-directory: minetest
        run: |
          git clone --depth 1 https://codeberg.org/halon/mcl_localplayer.git clientmods/mcl_localplayer
          echo "load_mod_mcl_localplayer = true" > clientmods/mods.conf

      - name: Apply patch
        working-directory: minetest
        run: |
          git apply ../android/clientmods_android.diff

      # Ensure the standard debug keystore exists for later Release signing
      - name: Ensure debug keystore exists
        run: |
          mkdir -p "$HOME/.android"
          keytool -genkeypair -v \
            -keystore "$HOME/.android/debug.keystore" \
            -alias luanti \
            -storetype JKS \
            -storepass android \
            -keypass android \
            -sigalg SHA256withRSA \
            -keyalg RSA -keysize 2048 -validity 36500 \
            -dname "CN=Android Debug,O=Android,C=US"
          ls -l "$HOME/.android/debug.keystore"

      # Point Release signing at the debug keystore
      # build.gradle reads ../local.properties relative to android/app
      - name: Configure Release signing with debug keystore
        working-directory: minetest/android
        run: |
          {
            echo "keystore=$HOME/.android/debug.keystore"
            echo "keystore.password=android"
            echo "key=luanti"
            echo "key.password=android"
          } > local.properties
          cat local.properties

      - name: Build AAB with Gradle
        # We build an AAB as well for uploading to the Play Store.
        working-directory: minetest
        run: cd android; ./gradlew bundlerelease

      # Convert .aab -> .apks using bundletool, signing with the debug keystore
      - name: Download bundletool
        working-directory: ${{ github.workspace }}
        run: |
          BUNDLETOOL_VERSION=1.17.2
          curl -sSL -o bundletool.jar "https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar"
          java -jar bundletool.jar version

      - name: Build .apks from .aab
        env:
          AAB_PATH: minetest/android/app/build/outputs/bundle/release/app-release.aab
          APKS_PATH: minetest/android/app/build/outputs/bundle/release/luanti.apks
        run: |
          ls -lh "$AAB_PATH"
          java -jar bundletool.jar build-apks \
            --bundle="$AAB_PATH" \
            --output="$APKS_PATH" \
            --mode=universal \
            --overwrite \
            --ks="$HOME/.android/debug.keystore" \
            --ks-pass="pass:android" \
            --ks-key-alias="luanti" \
            --key-pass="pass:android"
          ls -lh "$APKS_PATH"

      - name: Upload APKS artifact (luanti.apks)
        uses: actions/upload-artifact@v4
        with:
          name: luanti.apks
          path: minetest/android/app/build/outputs/bundle/release/luanti.apks

      - name: Save AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: Luanti-release.aab
          path: minetest/android/app/build/outputs/bundle/release/app-release.aab
